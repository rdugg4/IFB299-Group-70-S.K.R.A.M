from django.test import TestCase
from django.test.client import RequestFactory
from testApp.create_users.CreateTestUsers import *
from testApp.create_users.create_testing_data import *
from django.contrib.auth.models import User, Group, AnonymousUser
from ..functions.CarPopularity import *
from django.db.models.query import QuerySet
from testApp.models import *

class test_CarPopularity(TestCase):
    @classmethod
    def setUpTestData(cls):
        CreateUsers()
        CreateTestData()

    def setUp(self):
        self.factory = RequestFactory()

    def test_NoInputs(self):
        request = self.factory.get('/')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into drive type groups')
        self.assertEqual(graphType, 'Column')
        counterAndNames = list(counterAndNames)
        self.assertEqual(len(counterAndNames), 4)
        self.assertEqual(counterAndNames[0][0], 4)
        self.assertEqual(counterAndNames[1][0], 8)
        self.assertEqual(counterAndNames[2][0], 11)
        self.assertEqual(counterAndNames[3][0], 4)
        self.assertEqual(counterAndNames[0][1], '4WD')
        self.assertEqual(counterAndNames[1][1], 'RWD')
        self.assertEqual(counterAndNames[2][1], 'FWD')
        self.assertEqual(counterAndNames[3][1], 'AWD')

    def test_GraphTypeInputs(self):
        request = self.factory.get('/?Graph=Column')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphType, 'Column')

        request = self.factory.get('/?Graph=Pie')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphType, 'Pie')

    def test_CatagoryInputs(self):
        request = self.factory.get('/?Catagory=seats')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into seat number groups')
        counterAndNames = list(counterAndNames)
        self.assertEqual(len(counterAndNames), 6)
        self.assertEqual(counterAndNames[0][1], 'Less than 3')
        self.assertEqual(counterAndNames[1][1], '4')
        self.assertEqual(counterAndNames[2][1], '5')
        self.assertEqual(counterAndNames[3][1], '6')
        self.assertEqual(counterAndNames[4][1], '7')
        self.assertEqual(counterAndNames[5][1], 'Greater than 8')
        self.assertEqual(counterAndNames[0][0], 0)
        self.assertEqual(counterAndNames[1][0], 5)
        self.assertEqual(counterAndNames[2][0], 21)
        self.assertEqual(counterAndNames[3][0], 0)
        self.assertEqual(counterAndNames[4][0], 1)
        self.assertEqual(counterAndNames[5][0], 0)

        request = self.factory.get('/?Catagory=driveType')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into drive type groups')
        counterAndNames = list(counterAndNames)
        self.assertEqual(len(counterAndNames), 4)
        self.assertEqual(counterAndNames[0][0], 4)
        self.assertEqual(counterAndNames[1][0], 8)
        self.assertEqual(counterAndNames[2][0], 11)
        self.assertEqual(counterAndNames[3][0], 4)
        self.assertEqual(counterAndNames[0][1], '4WD')
        self.assertEqual(counterAndNames[1][1], 'RWD')
        self.assertEqual(counterAndNames[2][1], 'FWD')
        self.assertEqual(counterAndNames[3][1], 'AWD')

        request = self.factory.get('/?Catagory=price')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into new price groups')
        counterAndNames = list(counterAndNames)
        self.assertEqual(len(counterAndNames), 10)
        self.assertEqual(counterAndNames[0][1], '$28200-$36539')
        self.assertEqual(counterAndNames[1][1], '$36539-$44878')
        self.assertEqual(counterAndNames[2][1], '$44878-$53217')
        self.assertEqual(counterAndNames[3][1], '$53217-$61556')
        self.assertEqual(counterAndNames[4][1], '$61556-$69895')
        self.assertEqual(counterAndNames[5][1], '$69895-$78234')
        self.assertEqual(counterAndNames[6][1], '$78234-$86573')
        self.assertEqual(counterAndNames[7][1], '$86573-$94912')
        self.assertEqual(counterAndNames[8][1], '$94912-$103251')
        self.assertEqual(counterAndNames[9][1], '$103251-$111590')
        self.assertEqual(counterAndNames[0][0], 10)
        self.assertEqual(counterAndNames[1][0], 2)
        self.assertEqual(counterAndNames[2][0], 3)
        self.assertEqual(counterAndNames[3][0], 6)
        self.assertEqual(counterAndNames[4][0], 1)
        self.assertEqual(counterAndNames[5][0], 0)
        self.assertEqual(counterAndNames[6][0], 2)
        self.assertEqual(counterAndNames[7][0], 1)
        self.assertEqual(counterAndNames[8][0], 1)
        self.assertEqual(counterAndNames[9][0], 1)

        request = self.factory.get('/?Catagory=makeName')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into vehicle make groups')
        counterAndNames = list(counterAndNames)
        self.assertEqual(len(counterAndNames), 13)
        self.assertEqual(counterAndNames[0][1], 'ALFA ROMEO')
        self.assertEqual(counterAndNames[1][1], 'AUDI')
        self.assertEqual(counterAndNames[2][1], 'BMW')
        self.assertEqual(counterAndNames[3][1], 'CHRYSLER')
        self.assertEqual(counterAndNames[4][1], 'LAND ROVER')
        self.assertEqual(counterAndNames[5][1], 'MAZDA')
        self.assertEqual(counterAndNames[6][1], 'MERCEDES-BENZ')
        self.assertEqual(counterAndNames[7][1], 'MITSUBISHI')
        self.assertEqual(counterAndNames[8][1], 'NISSAN')
        self.assertEqual(counterAndNames[9][1], 'PEUGEOT')
        self.assertEqual(counterAndNames[10][1], 'TOYOTA')
        self.assertEqual(counterAndNames[11][1], 'VOLKSWAGEN')
        self.assertEqual(counterAndNames[12][1], 'VOLVO')
        self.assertEqual(counterAndNames[0][0], 1)
        self.assertEqual(counterAndNames[1][0], 3)
        self.assertEqual(counterAndNames[2][0], 3)
        self.assertEqual(counterAndNames[3][0], 1)
        self.assertEqual(counterAndNames[4][0], 1)
        self.assertEqual(counterAndNames[5][0], 1)
        self.assertEqual(counterAndNames[6][0], 2)
        self.assertEqual(counterAndNames[7][0], 1)
        self.assertEqual(counterAndNames[8][0], 3)
        self.assertEqual(counterAndNames[9][0], 1)
        self.assertEqual(counterAndNames[10][0], 1)
        self.assertEqual(counterAndNames[11][0], 6)
        self.assertEqual(counterAndNames[12][0], 3)

    def test_MultipleInputs(self):
        request = self.factory.get('/?Catagory=seats&Graph=Pie')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into seat number groups')
        self.assertEqual(graphType, 'Pie')

        request = self.factory.get('/?Catagory=makeName&Graph=Pie')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into vehicle make groups')
        self.assertEqual(graphType, 'Pie')

        request = self.factory.get('/?Catagory=seats&Graph=Column')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into seat number groups')
        self.assertEqual(graphType, 'Column')

        request = self.factory.get('/?Catagory=makeName&Graph=Column')
        counterAndNames, graphTitle, graphType = CarPopularity.CountCars(request)
        self.assertIsInstance(counterAndNames, zip)
        self.assertIsInstance(graphTitle, str)
        self.assertIsInstance(graphType, str)
        self.assertEqual(graphTitle, 'Number of Car rentals divided into vehicle make groups')
        self.assertEqual(graphType, 'Column')
